{"version":3,"sources":["selectors/laptimes.js","TrackdayImola.png","components/Item.js","App.js","query-configs/laptimes.js","store.js","index.js"],"names":["getLaptimes","state","entities","laptimes","Item","props","c","lap","pos","date","Date","parseInt","attributes","LapTime","className","style","backgroundImage","steamProfile","avatar","large","name","getMinutes","getSeconds","getMilliseconds","App","validClasses","useSelector","laptimesSelectors","React","useState","sortedLaptimes","setSortedLaptimes","selectedClass","setSelectedClass","useRequest","force","url","transform","body","update","prev","next","useEffect","length","sort","a","b","reverse","Fragment","src","heading","alt","value","onChange","e","indexOf","target","map","i","laps","r","push","renderRest","reducer","combineReducers","entitiesReducer","queries","queriesReducer","store","createStore","applyMiddleware","queryMiddleware","superagentInterface","getQueries","ReactDOM","render","StrictMode","queriesSelector","document","getElementById"],"mappings":"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","file":"static/js/main.281717f8.chunk.js","sourcesContent":["export const getVehicles = state => state.entities.vehicles;\n\nexport const getLaptimes = state => state.entities.laptimes;","export default __webpack_public_path__ + \"static/media/TrackdayImola.e7c740aa.png\";","const Item = (props) => {\n    const { c, lap, pos } = props; \n    let date = new Date(parseInt(lap.attributes.LapTime));\n    return (\n        <div className={c}>\n            <div className=\"pos\">{pos}</div>\n            <div className=\"pic\" style={{backgroundImage: `url(${lap.steamProfile.avatar.large})`}}></div>\n            <div className=\"name\">{lap.name}</div>\n            <div className=\"score\">{`${date.getMinutes()}:${date.getSeconds()}.${date.getMilliseconds()}`}</div>\n        </div>\n    )\n}\nexport default Item;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useRequest } from 'redux-query-react';\nimport * as laptimesQueryConfigs from './query-configs/laptimes';\nimport * as laptimesSelectors from './selectors/laptimes';\nimport heading from './TrackdayImola.png';\nimport Item from './components/Item';\n\nconst App = () => {\n\n  const validClasses = ['GTE','GT1','GT3','GT4'];\n  const laptimes = useSelector(laptimesSelectors.getLaptimes);\n  const [sortedLaptimes,setSortedLaptimes] = React.useState(false);\n  const [selectedClass,setSelectedClass] = React.useState(validClasses[0]);\n\n  useRequest(laptimesQueryConfigs.laptimesRequest(selectedClass)); // <- defaulting to GTE class\n\n  React.useEffect(()=>{\n    if(laptimes){\n      if(laptimes.length)\n        setSortedLaptimes(laptimes.sort((a,b) => b.attributes.LapTime-a.attributes.LapTime).reverse())\n      else \n        setSortedLaptimes([]);\n    }\n  },[laptimes]);\n\n  const renderRest = (laps) => {\n    let r = [];\n    for (let i = 3; i < laps.length; i++) {\n      r.push(<Item c=\"item\" lap={sortedLaptimes[i]} pos={i} key={`laptime-${i}`}/>);\n    }\n    return r;\n  }\n\n  // console.log(selectedClass);\n\n  if(selectedClass && sortedLaptimes)\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <div className=\"container-fluid text-center\">\n                <img src={heading} alt=\"Trackday@Imola\" className=\"img-fluid\"/>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-8 offset-sm-2 col-md-6 offset-md-3\">\n              <select className=\"custom-select custom-select-lg mt-3\" \n                value={selectedClass}\n                onChange={(e)=>{\n                  if(validClasses.indexOf(e.target.value)!==-1)\n                    setSelectedClass(e.target.value);\n                }}>\n                <option>Select class</option>\n                {validClasses.map((c,i)=>\n                  <option value={c} key={`select-option-${i}`}>{c}</option>\n                )}\n              </select>  \n            </div>\n          </div>\n        </div>\n        {sortedLaptimes.length && \n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-lg-8 offset-lg-2\">\n              <div className=\"center\">\n                  <div className=\"top3\">\n                    <Item c=\"two item\" lap={sortedLaptimes[1]} pos={2}/>\n                    <Item c=\"one item\" lap={sortedLaptimes[0]} pos={1}/>\n                    <Item c=\"three item\" lap={sortedLaptimes[2]} pos={3}/>\n                  </div>\n                  <div className=\"list\">\n                    {renderRest(sortedLaptimes)}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        }\n      </React.Fragment>\n    )\n  return <p>Loading data</p>;\n}\nexport default App;","export const vehiclesRequest = () => {\n  return {\n    url: `http://api.trollsimracing.no:8080/classes`,\n    transform: body => ({\n      vehicles: body,\n    }),\n    update: {\n      vehicles: (prev, next) => {\n        return next;\n      },\n    },\n  };\n}\n\nexport const laptimesRequest = (c) => {\n  return {\n    force: true,\n    url: `http://api.trollsimracing.no:8080/class/${c}`,\n    transform: body => ({\n      laptimes: body,\n    }),\n    update: {\n      laptimes: (prev, next) => {\n        return next;\n      },\n    },\n  };\n}","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { entitiesReducer, queriesReducer, queryMiddleware } from 'redux-query';\nimport superagentInterface from 'redux-query-interface-superagent';\n\nexport const getQueries = state => state.queries;\nexport const getEntities = state => state.entities;\n\nconst reducer = combineReducers({\n  entities: entitiesReducer,\n  queries: queriesReducer,\n});\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(queryMiddleware(superagentInterface, getQueries, getEntities)),\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Provider as ReduxQueryProvider } from 'redux-query-react';\nimport App from './App';\nimport store from './store';\n\nimport './index.css';\n\nexport const getQueries = state => state.queries;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ReduxQueryProvider queriesSelector={getQueries}>\n        <App />\n      </ReduxQueryProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}